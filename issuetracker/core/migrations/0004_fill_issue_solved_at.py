# Generated by Django 2.0.6 on 2018-06-22 00:39

from django.db import migrations, transaction


def fill_issue_solved_at(apps, schema_editor):
    """Set `Issue.solved_at` based on `Issue.status`.

    `IssueUpdate.solved_at` could have also been updated to match
    changes in `status` (assuming statuses were not deleted and their
    `is_solved` were not modified), but it's more complicated and can be
    done anytime it will be needed.
    """
    Issue = apps.get_model('core', 'Issue')
    IssueUpdate = apps.get_model('core', 'IssueUpdate')

    field_names = [field_name for field_name in
                   {f.name for f in Issue._meta.get_fields()} &
                   {f.name for f in IssueUpdate._meta.get_fields()}
                   if field_name != 'id']

    for issue in Issue.objects.filter(solved_at=None):
        try:
            issue.solved_at = IssueUpdate.objects.filter(
                issue=issue, status__is_solved=True).latest().updated_at
        except IssueUpdate.DoesNotExist:
            continue
        with transaction.atomic():
            issue.save()
            # Manually add an `IssueUpdate` (as the custom `save` isn't
            # available in migrations).
            IssueUpdate.objects.create(
                issue=issue, **{f: getattr(issue, f) for f in field_names})


class Migration(migrations.Migration):
    """Migrations that fills `Issue.solved_at` from `IssueUpdate`."""

    dependencies = [
        ('core', '0003_auto_20180622_0038'),
    ]

    operations = [
        migrations.RunPython(
            fill_issue_solved_at,
            # Naive editing would have messed up `IssueUpdate`s.
            migrations.RunPython.noop,
            elidable=True)
    ]
